{
  "id": "security-analysis",
  "name": "Security Analysis",
  "description": "Comprehensive security analysis identifying vulnerabilities, threats, and security best practices",
  "category": "security_analysis",
  "version": "1.0.0",
  "author": "DebugBuddy Team",
  "created_date": "2024-01-15",
  "schema_version": "1.0.0",
  "template": {
    "task": "Perform comprehensive security analysis of ${language} code",
    "language": "${language}",
    "context": {
      "file_path": "${filePath}",
      "selected_code": "${selectedCode}",
      "surrounding_context": "${surroundingCode}",
      "security_focus": "${securityFocus}",
      "threat_model": "${threatModel}",
      "compliance_standards": "${complianceStandards}"
    },
    "instructions": "Analyze the following ${language} code for security vulnerabilities and threats. Focus on: ${securityFocus}\n\n**Code to analyze:**\n```${language}\n${selectedCode}\n```\n\n**File:** ${filePath}\n**Context:**\n```${language}\n${surroundingCode}\n```\n\n**Security Analysis Framework:**\n\n**1. Vulnerability Assessment:**\n${vulnerabilityChecklist}\n\n**2. Threat Modeling:**\n${threatModel}\n\n**3. Language-Specific Security Concerns:**\n${languageSecurityPatterns}\n\n**4. Compliance Requirements:**\n${complianceStandards}\n\n**Analysis Output Format:**\n\n**[SEVERITY] [VULNERABILITY_TYPE]** Issue Title\n- **Description:** Detailed explanation of the security issue\n- **Risk Level:** Impact and likelihood assessment\n- **Attack Vector:** How this vulnerability could be exploited\n- **Affected Code:** Specific lines or functions at risk\n- **Remediation:** Step-by-step fix instructions\n- **Prevention:** Best practices to avoid similar issues\n- **Testing:** How to verify the fix works\n- **References:** Security standards or documentation links\n\n**Security Severity Levels:**\n- **CRITICAL**: Immediate security risk, potential for system compromise\n- **HIGH**: Significant security risk, potential for data breach\n- **MEDIUM**: Moderate security risk, potential for limited access\n- **LOW**: Minor security concern, defense in depth improvement\n- **INFO**: Security best practice recommendation",
    "output_format": {
      "structure": "security_report",
      "include_severity_levels": true,
      "include_attack_vectors": true,
      "include_remediation_steps": true,
      "include_code_examples": true,
      "include_compliance_mapping": true,
      "group_by_severity": true
    },
    "variables": [
      "language",
      "filePath",
      "selectedCode",
      "surroundingCode",
      "securityFocus",
      "threatModel",
      "complianceStandards",
      "vulnerabilityChecklist",
      "languageSecurityPatterns"
    ]
  },
  "config": {
    "configurable_fields": [
      "security_focus",
      "severity_threshold",
      "include_compliance_mapping",
      "threat_model",
      "max_findings",
      "include_remediation_examples",
      "include_attack_scenarios"
    ],
    "default_values": {
      "security_focus": ["injection", "authentication", "authorization", "data_protection"],
      "severity_threshold": "medium",
      "include_compliance_mapping": true,
      "threat_model": "STRIDE",
      "max_findings": 10,
      "include_remediation_examples": true,
      "include_attack_scenarios": true
    },
    "validation_rules": {
      "security_focus": {
        "type": "array",
        "items": {
          "enum": ["injection", "authentication", "authorization", "data_protection", "cryptography", "input_validation", "session_management", "error_handling", "logging", "configuration"]
        }
      },
      "severity_threshold": {
        "type": "string",
        "enum": ["low", "medium", "high", "critical"]
      },
      "threat_model": {
        "type": "string",
        "enum": ["STRIDE", "PASTA", "OCTAVE", "TRIKE"]
      },
      "max_findings": {
        "type": "number",
        "min": 1,
        "max": 20
      }
    }
  },
  "vulnerability_categories": {
    "injection": [
      "SQL Injection",
      "NoSQL Injection", 
      "Command Injection",
      "LDAP Injection",
      "XPath Injection",
      "Code Injection"
    ],
    "authentication": [
      "Weak Password Requirements",
      "Insecure Authentication Logic",
      "Missing Multi-Factor Authentication",
      "Session Fixation",
      "Credential Exposure"
    ],
    "authorization": [
      "Privilege Escalation",
      "Insecure Direct Object References",
      "Missing Access Controls",
      "Role-Based Access Control Issues"
    ],
    "data_protection": [
      "Sensitive Data Exposure",
      "Insufficient Encryption",
      "Insecure Data Storage",
      "Data Leakage",
      "Privacy Violations"
    ],
    "input_validation": [
      "Cross-Site Scripting (XSS)",
      "Cross-Site Request Forgery (CSRF)",
      "Input Validation Bypass",
      "Buffer Overflow",
      "Format String Vulnerabilities"
    ]
  },
  "language_security_patterns": {
    "javascript": [
      "Check for eval() usage and code injection risks",
      "Validate DOM manipulation for XSS vulnerabilities",
      "Review async/await error handling for information leakage",
      "Analyze prototype pollution vulnerabilities",
      "Check for insecure randomness in crypto operations"
    ],
    "python": [
      "Check for pickle deserialization vulnerabilities",
      "Validate SQL query construction for injection risks",
      "Review file path handling for directory traversal",
      "Analyze subprocess usage for command injection",
      "Check for insecure cryptographic implementations"
    ],
    "java": [
      "Check for deserialization vulnerabilities",
      "Validate JDBC usage for SQL injection",
      "Review XML parsing for XXE vulnerabilities",
      "Analyze reflection usage for security bypasses",
      "Check for insecure random number generation"
    ],
    "csharp": [
      "Check for SQL injection in Entity Framework queries",
      "Validate XML processing for XXE vulnerabilities",
      "Review serialization for deserialization attacks",
      "Analyze cryptographic implementations",
      "Check for path traversal in file operations"
    ],
    "go": [
      "Check for SQL injection in database queries",
      "Validate input sanitization and validation",
      "Review goroutine usage for race conditions",
      "Analyze cryptographic implementations",
      "Check for command injection in exec calls"
    ]
  },
  "compliance_frameworks": {
    "OWASP_TOP_10": ["A01:2021-Broken Access Control", "A02:2021-Cryptographic Failures", "A03:2021-Injection"],
    "CWE": ["CWE-79: XSS", "CWE-89: SQL Injection", "CWE-200: Information Exposure"],
    "NIST": ["NIST SP 800-53", "NIST Cybersecurity Framework"],
    "ISO_27001": ["Information Security Management", "Risk Assessment"],
    "PCI_DSS": ["Payment Card Industry Data Security Standard"],
    "GDPR": ["General Data Protection Regulation", "Privacy by Design"]
  },
  "threat_models": {
    "STRIDE": {
      "Spoofing": "Identity verification and authentication",
      "Tampering": "Data integrity and validation",
      "Repudiation": "Logging and audit trails",
      "Information_Disclosure": "Data protection and encryption",
      "Denial_of_Service": "Availability and resource management",
      "Elevation_of_Privilege": "Authorization and access control"
    }
  },
  "metadata": {
    "supported_languages": ["javascript", "typescript", "python", "java", "csharp", "go", "rust", "php", "ruby", "swift", "kotlin"],
    "required_context": ["selectedCode", "language", "securityFocus"],
    "optional_context": ["threatModel", "complianceStandards", "surroundingCode"],
    "performance_notes": "Security analysis is computationally intensive. Results are cached for performance.",
    "supported_frameworks": ["OWASP", "CWE", "NIST", "ISO27001", "PCI-DSS", "GDPR"]
  }
}