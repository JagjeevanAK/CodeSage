{
  "id": "refactoring",
  "name": "Code Refactoring Suggestions",
  "description": "Provides comprehensive refactoring suggestions focused on maintainability, performance, and readability improvements",
  "category": "refactoring",
  "version": "1.0.0",
  "author": "DebugBuddy Team",
  "created_date": "2024-01-15",
  "schema_version": "1.0.0",
  "template": {
    "task": "Analyze code and provide refactoring suggestions to improve ${refactoringFocus}",
    "language": "${language}",
    "context": {
      "file_path": "${filePath}",
      "selected_code": "${selectedCode}",
      "surrounding_context": "${surroundingCode}",
      "project_type": "${projectType}",
      "refactoring_focus": "${refactoringFocus}",
      "complexity_threshold": "${complexityThreshold}",
      "experience_level": "${experienceLevel}"
    },
    "instructions": "Analyze the following ${language} code and provide refactoring suggestions focused on: ${refactoringFocus}.\n\n**Code to refactor:**\n```${language}\n${selectedCode}\n```\n\n**File Context:** ${filePath}\n**Surrounding Code:**\n```${language}\n${surroundingCode}\n```\n\n**Refactoring Guidelines for ${language}:**\n${languageSpecificPatterns}\n\n**Analysis Focus Areas:**\n${refactoringCategories}\n\n**Experience Level:** ${experienceLevel}\n${experienceLevelGuidance}\n\n**Provide refactoring suggestions in the following format:**\n\n**[CATEGORY] [PRIORITY]** Refactoring Title\n- **Current Issue:** Description of the problem\n- **Proposed Solution:** Detailed refactoring approach\n- **Benefits:** Expected improvements (maintainability, performance, readability)\n- **Implementation:** Step-by-step refactoring process\n- **Code Example:** Before and after code snippets\n- **Risk Assessment:** Potential issues and mitigation strategies\n- **Testing Strategy:** How to verify the refactoring works correctly\n\nPrioritize suggestions based on impact and complexity. Only suggest refactorings above ${complexityThreshold} complexity threshold.",
    "output_format": {
      "structure": "prioritized_suggestions",
      "include_line_numbers": true,
      "include_priority": true,
      "include_explanation": true,
      "include_code_examples": true,
      "include_before_after": true,
      "include_risk_assessment": true,
      "include_testing_strategy": true,
      "group_by_category": true
    },
    "variables": [
      "language",
      "filePath",
      "selectedCode",
      "surroundingCode",
      "projectType",
      "refactoringFocus",
      "complexityThreshold",
      "experienceLevel",
      "languageSpecificPatterns",
      "refactoringCategories",
      "experienceLevelGuidance"
    ]
  },
  "config": {
    "configurable_fields": [
      "refactoring_focus",
      "max_suggestions",
      "complexity_threshold",
      "experience_level",
      "include_performance_metrics",
      "include_design_patterns",
      "include_testing_suggestions",
      "priority_filter"
    ],
    "default_values": {
      "refactoring_focus": ["maintainability", "readability", "performance"],
      "max_suggestions": 8,
      "complexity_threshold": "medium",
      "experience_level": "intermediate",
      "include_performance_metrics": true,
      "include_design_patterns": true,
      "include_testing_suggestions": true,
      "priority_filter": "medium"
    },
    "validation_rules": {
      "refactoring_focus": {
        "type": "array",
        "items": {
          "enum": ["maintainability", "readability", "performance", "security", "testability", "modularity", "reusability", "scalability"]
        }
      },
      "max_suggestions": {
        "type": "number",
        "min": 1,
        "max": 15
      },
      "complexity_threshold": {
        "type": "string",
        "enum": ["low", "medium", "high"]
      },
      "experience_level": {
        "type": "string",
        "enum": ["beginner", "intermediate", "advanced"]
      },
      "priority_filter": {
        "type": "string",
        "enum": ["low", "medium", "high", "critical"]
      }
    }
  },
  "refactoring_categories": {
    "maintainability": [
      "Extract methods/functions for better modularity",
      "Reduce code duplication through abstraction",
      "Improve naming conventions for clarity",
      "Simplify complex conditional logic",
      "Break down large classes/modules"
    ],
    "readability": [
      "Improve variable and function naming",
      "Add meaningful comments and documentation",
      "Simplify complex expressions",
      "Consistent code formatting and style",
      "Remove dead or commented code"
    ],
    "performance": [
      "Optimize algorithm complexity",
      "Reduce memory allocations",
      "Improve data structure usage",
      "Eliminate redundant operations",
      "Optimize database queries and I/O"
    ],
    "security": [
      "Input validation and sanitization",
      "Secure data handling practices",
      "Authentication and authorization improvements",
      "Prevent common vulnerabilities",
      "Secure configuration management"
    ],
    "testability": [
      "Reduce dependencies and coupling",
      "Extract testable units",
      "Improve dependency injection",
      "Add error handling for edge cases",
      "Create mockable interfaces"
    ],
    "modularity": [
      "Apply single responsibility principle",
      "Improve separation of concerns",
      "Create reusable components",
      "Reduce tight coupling",
      "Implement proper abstraction layers"
    ]
  },
  "language_specific_patterns": {
    "javascript": [
      "Use modern ES6+ features (arrow functions, destructuring, modules)",
      "Apply functional programming patterns where appropriate",
      "Optimize async/await usage and promise handling",
      "Implement proper error boundaries and handling",
      "Use appropriate data structures (Map, Set, WeakMap)"
    ],
    "typescript": [
      "Leverage strong typing and interfaces",
      "Use generic types for reusability",
      "Apply design patterns with proper typing",
      "Optimize type definitions and avoid 'any'",
      "Use utility types and conditional types"
    ],
    "python": [
      "Follow PEP 8 style guidelines",
      "Use list comprehensions and generator expressions",
      "Apply context managers for resource handling",
      "Leverage dataclasses and type hints",
      "Use appropriate built-in functions and libraries"
    ],
    "java": [
      "Apply SOLID principles and design patterns",
      "Use streams and lambda expressions",
      "Implement proper exception handling hierarchy",
      "Optimize collections and data structures",
      "Apply dependency injection patterns"
    ],
    "csharp": [
      "Use LINQ for data operations",
      "Apply async/await patterns correctly",
      "Implement proper disposal patterns",
      "Use nullable reference types",
      "Apply dependency injection and IoC"
    ],
    "go": [
      "Follow Go idioms and conventions",
      "Use interfaces for abstraction",
      "Implement proper error handling",
      "Optimize goroutine and channel usage",
      "Apply composition over inheritance"
    ],
    "rust": [
      "Leverage ownership and borrowing effectively",
      "Use Result and Option types properly",
      "Apply zero-cost abstractions",
      "Optimize memory usage and allocations",
      "Use traits for code reuse"
    ]
  },
  "experience_level_guidance": {
    "beginner": "Focus on fundamental refactoring principles with detailed explanations. Provide step-by-step instructions and emphasize learning opportunities. Include references to best practices and common patterns.",
    "intermediate": "Balance practical improvements with architectural considerations. Reference design patterns and provide alternative approaches. Include performance and maintainability trade-offs.",
    "advanced": "Focus on architectural improvements, performance optimizations, and complex design patterns. Discuss trade-offs, edge cases, and advanced language features. Consider system-wide implications."
  },
  "design_patterns": {
    "creational": ["Factory", "Builder", "Singleton", "Prototype"],
    "structural": ["Adapter", "Decorator", "Facade", "Composite"],
    "behavioral": ["Observer", "Strategy", "Command", "State", "Template Method"]
  },
  "refactoring_techniques": [
    "Extract Method",
    "Extract Class",
    "Move Method",
    "Rename Method/Variable",
    "Replace Magic Numbers with Constants",
    "Replace Conditional with Polymorphism",
    "Introduce Parameter Object",
    "Replace Method with Method Object",
    "Decompose Conditional",
    "Consolidate Duplicate Conditional Fragments"
  ],
  "metadata": {
    "supported_languages": ["javascript", "typescript", "python", "java", "csharp", "go", "rust", "php", "ruby", "swift", "kotlin", "cpp"],
    "required_context": ["selectedCode", "language", "refactoringFocus"],
    "optional_context": ["surroundingCode", "projectType", "complexityThreshold", "experienceLevel"],
    "performance_notes": "Optimized for code analysis up to 2000 lines. Pattern matching is cached for performance.",
    "supported_refactoring_types": ["structural", "behavioral", "performance", "security", "maintainability", "readability"]
  }
}