{
  "id": "test-generation",
  "name": "Test Generation",
  "description": "Generates comprehensive test suites including unit tests, integration tests, and edge case coverage",
  "category": "test_generation",
  "version": "1.0.0",
  "author": "DebugBuddy Team",
  "created_date": "2024-01-15",
  "schema_version": "1.0.0",
  "template": {
    "task": "Generate comprehensive test suite for ${language} code",
    "language": "${language}",
    "context": {
      "file_path": "${filePath}",
      "selected_code": "${selectedCode}",
      "surrounding_context": "${surroundingCode}",
      "test_types": "${testTypes}",
      "coverage_target": "${coverageTarget}",
      "testing_framework": "${testingFramework}"
    },
    "instructions": "Generate a comprehensive test suite for the following ${language} code using ${testingFramework}. Target test types: ${testTypes}\n\n**Code to test:**\n```${language}\n${selectedCode}\n```\n\n**File:** ${filePath}\n**Context:**\n```${language}\n${surroundingCode}\n```\n\n**Testing Requirements:**\n- **Coverage Target:** ${coverageTarget}%\n- **Test Types:** ${testTypes}\n- **Framework:** ${testingFramework}\n\n**Test Generation Framework:**\n\n**1. Test Analysis:**\n${testAnalysis}\n\n**2. Test Categories:**\n${testCategories}\n\n**3. Language-Specific Testing Patterns:**\n${languageTestingPatterns}\n\n**4. Edge Cases and Boundary Conditions:**\n${edgeCaseAnalysis}\n\n**Generate tests in the following format:**\n\n**Test Suite Structure:**\n```${language}\n// Test file: ${testFileName}\n${testImports}\n\n${testSuiteStructure}\n```\n\n**For each test case, include:**\n- **Test Name:** Descriptive test method name\n- **Test Description:** What the test validates\n- **Setup:** Test data and mock preparation\n- **Execution:** Code under test invocation\n- **Assertions:** Expected outcomes verification\n- **Cleanup:** Resource cleanup if needed\n- **Comments:** Explanation of test logic\n\n**Test Categories to Cover:**\n1. **Happy Path Tests:** Normal operation scenarios\n2. **Edge Case Tests:** Boundary conditions and limits\n3. **Error Handling Tests:** Exception and error scenarios\n4. **Integration Tests:** Component interaction testing\n5. **Performance Tests:** Basic performance validation\n6. **Security Tests:** Input validation and security checks",
    "output_format": {
      "structure": "complete_test_suite",
      "include_test_setup": true,
      "include_mock_data": true,
      "include_assertions": true,
      "include_edge_cases": true,
      "include_performance_tests": false,
      "include_integration_tests": true,
      "follow_naming_conventions": true
    },
    "variables": [
      "language",
      "filePath",
      "selectedCode",
      "surroundingCode",
      "testTypes",
      "coverageTarget",
      "testingFramework",
      "testAnalysis",
      "testCategories",
      "languageTestingPatterns",
      "edgeCaseAnalysis",
      "testFileName",
      "testImports",
      "testSuiteStructure"
    ]
  },
  "config": {
    "configurable_fields": [
      "test_types",
      "coverage_target",
      "testing_framework",
      "include_mocks",
      "include_integration_tests",
      "include_performance_tests",
      "max_test_cases",
      "test_naming_convention"
    ],
    "default_values": {
      "test_types": ["unit", "integration", "edge_case"],
      "coverage_target": 80,
      "testing_framework": "auto_detect",
      "include_mocks": true,
      "include_integration_tests": true,
      "include_performance_tests": false,
      "max_test_cases": 15,
      "test_naming_convention": "descriptive"
    },
    "validation_rules": {
      "test_types": {
        "type": "array",
        "items": {
          "enum": ["unit", "integration", "end_to_end", "performance", "security", "edge_case", "regression"]
        }
      },
      "coverage_target": {
        "type": "number",
        "min": 50,
        "max": 100
      },
      "max_test_cases": {
        "type": "number",
        "min": 1,
        "max": 50
      },
      "test_naming_convention": {
        "type": "string",
        "enum": ["descriptive", "given_when_then", "should_when", "camelCase", "snake_case"]
      }
    }
  },
  "test_categories": {
    "unit": [
      "Function return value validation",
      "Parameter validation and edge cases",
      "State change verification",
      "Exception handling testing",
      "Mock and stub interactions"
    ],
    "integration": [
      "Component interaction testing",
      "Database integration testing",
      "API endpoint testing",
      "Service layer integration",
      "External dependency testing"
    ],
    "edge_case": [
      "Null and undefined inputs",
      "Empty collections and strings",
      "Boundary value testing",
      "Maximum and minimum limits",
      "Invalid input handling"
    ],
    "performance": [
      "Response time validation",
      "Memory usage testing",
      "Load testing scenarios",
      "Concurrency testing",
      "Resource cleanup verification"
    ],
    "security": [
      "Input sanitization testing",
      "Authentication testing",
      "Authorization testing",
      "Data validation testing",
      "Injection attack prevention"
    ]
  },
  "language_testing_patterns": {
    "javascript": [
      "Use Jest or Mocha for test framework",
      "Mock external dependencies with jest.mock()",
      "Test async functions with async/await",
      "Use describe/it structure for test organization",
      "Test DOM manipulation with testing-library"
    ],
    "typescript": [
      "Use Jest with TypeScript support",
      "Test type safety and interfaces",
      "Mock dependencies with proper typing",
      "Test generic functions with various types",
      "Use type assertions in tests"
    ],
    "python": [
      "Use pytest or unittest framework",
      "Mock dependencies with unittest.mock",
      "Test exception handling with pytest.raises",
      "Use fixtures for test data setup",
      "Test async functions with pytest-asyncio"
    ],
    "java": [
      "Use JUnit 5 for test framework",
      "Mock dependencies with Mockito",
      "Test exceptions with assertThrows",
      "Use @BeforeEach and @AfterEach for setup",
      "Test Spring components with @SpringBootTest"
    ],
    "csharp": [
      "Use xUnit or NUnit framework",
      "Mock dependencies with Moq",
      "Test async methods with async/await",
      "Use [Fact] and [Theory] attributes",
      "Test ASP.NET Core with TestServer"
    ],
    "go": [
      "Use built-in testing package",
      "Create table-driven tests",
      "Mock interfaces for testing",
      "Use testify for assertions",
      "Test HTTP handlers with httptest"
    ],
    "rust": [
      "Use built-in test framework with #[test]",
      "Test error handling with Result types",
      "Use mock crates for dependencies",
      "Test async functions with tokio::test",
      "Use property-based testing with proptest"
    ]
  },
  "testing_frameworks": {
    "javascript": ["Jest", "Mocha", "Jasmine", "Vitest", "Cypress"],
    "typescript": ["Jest", "Vitest", "Mocha", "Playwright", "Cypress"],
    "python": ["pytest", "unittest", "nose2", "hypothesis"],
    "java": ["JUnit 5", "TestNG", "Mockito", "AssertJ"],
    "csharp": ["xUnit", "NUnit", "MSTest", "Moq", "FluentAssertions"],
    "go": ["testing", "testify", "Ginkgo", "GoMock"],
    "rust": ["built-in", "tokio-test", "proptest", "mockall"]
  },
  "test_naming_conventions": {
    "descriptive": "testMethodName_WhenCondition_ShouldExpectedBehavior",
    "given_when_then": "givenCondition_whenAction_thenExpectedResult",
    "should_when": "shouldExpectedBehavior_whenCondition",
    "camelCase": "testMethodNameWithCamelCase",
    "snake_case": "test_method_name_with_snake_case"
  },
  "mock_patterns": {
    "javascript": "jest.mock(), jest.fn(), jest.spyOn()",
    "python": "unittest.mock.Mock(), @patch decorator",
    "java": "Mockito.mock(), @Mock annotation",
    "csharp": "Mock<T>(), Setup() and Returns()",
    "go": "Interface-based mocking, testify/mock",
    "rust": "mockall crate, trait mocking"
  },
  "assertion_patterns": {
    "javascript": "expect().toBe(), expect().toEqual(), expect().toThrow()",
    "python": "assert, pytest.raises(), assert_called_with()",
    "java": "assertEquals(), assertThrows(), verify()",
    "csharp": "Assert.Equal(), Assert.Throws(), mock.Verify()",
    "go": "if got != want, testify assertions",
    "rust": "assert_eq!(), assert!(), panic testing"
  },
  "metadata": {
    "supported_languages": ["javascript", "typescript", "python", "java", "csharp", "go", "rust", "php", "ruby", "swift", "kotlin"],
    "required_context": ["selectedCode", "language", "testTypes"],
    "optional_context": ["testingFramework", "coverageTarget", "surroundingCode"],
    "performance_notes": "Test generation includes comprehensive coverage analysis. Framework detection is cached for performance.",
    "supported_test_types": ["unit", "integration", "end_to_end", "performance", "security", "edge_case", "regression"]
  }
}