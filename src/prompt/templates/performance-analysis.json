{
  "id": "performance-analysis",
  "name": "Performance Analysis",
  "description": "Comprehensive performance analysis identifying bottlenecks, optimization opportunities, and efficiency improvements",
  "category": "performance_analysis",
  "version": "1.0.0",
  "author": "DebugBuddy Team",
  "created_date": "2024-01-15",
  "schema_version": "1.0.0",
  "template": {
    "task": "Perform comprehensive performance analysis of ${language} code",
    "language": "${language}",
    "context": {
      "file_path": "${filePath}",
      "selected_code": "${selectedCode}",
      "surrounding_context": "${surroundingCode}",
      "performance_focus": "${performanceFocus}",
      "target_metrics": "${targetMetrics}",
      "execution_context": "${executionContext}"
    },
    "instructions": "Analyze the following ${language} code for performance issues and optimization opportunities. Focus on: ${performanceFocus}\n\n**Code to analyze:**\n```${language}\n${selectedCode}\n```\n\n**File:** ${filePath}\n**Execution Context:** ${executionContext}\n**Target Metrics:** ${targetMetrics}\n\n**Performance Analysis Framework:**\n\n**1. Algorithmic Complexity Analysis:**\n${complexityAnalysis}\n\n**2. Resource Usage Assessment:**\n${resourceUsageChecklist}\n\n**3. Language-Specific Performance Patterns:**\n${languagePerformancePatterns}\n\n**4. Bottleneck Identification:**\n${bottleneckAnalysis}\n\n**Analysis Output Format:**\n\n**[IMPACT] [CATEGORY]** Performance Issue Title\n- **Current Performance:** Description of current behavior and metrics\n- **Bottleneck Analysis:** Root cause of performance issue\n- **Complexity:** Time and space complexity assessment\n- **Resource Impact:** Memory, CPU, I/O, or network implications\n- **Optimization Strategy:** Detailed improvement approach\n- **Expected Improvement:** Quantified performance gains\n- **Implementation:** Step-by-step optimization instructions\n- **Trade-offs:** Potential downsides or complexity increases\n- **Measurement:** How to benchmark and verify improvements\n- **Code Example:** Before and after optimization examples\n\n**Performance Impact Levels:**\n- **CRITICAL**: Severe performance bottleneck, system unusable\n- **HIGH**: Significant performance impact, user experience affected\n- **MEDIUM**: Moderate performance issue, optimization recommended\n- **LOW**: Minor performance improvement opportunity\n- **MICRO**: Small optimization, marginal gains",
    "output_format": {
      "structure": "performance_report",
      "include_complexity_analysis": true,
      "include_benchmarks": true,
      "include_optimization_examples": true,
      "include_measurement_strategies": true,
      "include_trade_off_analysis": true,
      "group_by_impact": true
    },
    "variables": [
      "language",
      "filePath",
      "selectedCode",
      "surroundingCode",
      "performanceFocus",
      "targetMetrics",
      "executionContext",
      "complexityAnalysis",
      "resourceUsageChecklist",
      "languagePerformancePatterns",
      "bottleneckAnalysis"
    ]
  },
  "config": {
    "configurable_fields": [
      "performance_focus",
      "impact_threshold",
      "include_micro_optimizations",
      "target_metrics",
      "execution_context",
      "max_suggestions",
      "include_benchmarking_code",
      "include_profiling_recommendations"
    ],
    "default_values": {
      "performance_focus": ["cpu", "memory", "io", "network"],
      "impact_threshold": "medium",
      "include_micro_optimizations": false,
      "target_metrics": ["latency", "throughput", "memory_usage"],
      "execution_context": "production",
      "max_suggestions": 8,
      "include_benchmarking_code": true,
      "include_profiling_recommendations": true
    },
    "validation_rules": {
      "performance_focus": {
        "type": "array",
        "items": {
          "enum": ["cpu", "memory", "io", "network", "database", "cache", "algorithm", "concurrency"]
        }
      },
      "impact_threshold": {
        "type": "string",
        "enum": ["low", "medium", "high", "critical"]
      },
      "target_metrics": {
        "type": "array",
        "items": {
          "enum": ["latency", "throughput", "memory_usage", "cpu_usage", "response_time", "scalability"]
        }
      },
      "execution_context": {
        "type": "string",
        "enum": ["development", "testing", "staging", "production"]
      },
      "max_suggestions": {
        "type": "number",
        "min": 1,
        "max": 15
      }
    }
  },
  "performance_categories": {
    "algorithmic": [
      "Time Complexity Optimization",
      "Space Complexity Reduction",
      "Algorithm Selection",
      "Data Structure Optimization",
      "Search and Sort Improvements"
    ],
    "memory": [
      "Memory Leak Prevention",
      "Object Pooling",
      "Garbage Collection Optimization",
      "Memory Allocation Patterns",
      "Cache-Friendly Data Structures"
    ],
    "io": [
      "File I/O Optimization",
      "Database Query Optimization",
      "Network Request Batching",
      "Asynchronous Processing",
      "Buffering Strategies"
    ],
    "concurrency": [
      "Thread Pool Optimization",
      "Lock Contention Reduction",
      "Parallel Processing",
      "Async/Await Patterns",
      "Race Condition Prevention"
    ],
    "caching": [
      "In-Memory Caching",
      "Distributed Caching",
      "Cache Invalidation",
      "Cache Hit Ratio Optimization",
      "CDN Integration"
    ]
  },
  "language_performance_patterns": {
    "javascript": [
      "Optimize event loop usage and avoid blocking operations",
      "Use efficient array methods and avoid unnecessary iterations",
      "Implement proper memory management and avoid closures leaks",
      "Optimize DOM manipulation and minimize reflows/repaints",
      "Use Web Workers for CPU-intensive tasks"
    ],
    "python": [
      "Use list comprehensions and generator expressions",
      "Optimize loops with built-in functions and libraries",
      "Implement proper memory management with context managers",
      "Use NumPy for numerical computations",
      "Optimize I/O operations with buffering and async"
    ],
    "java": [
      "Optimize garbage collection and memory allocation",
      "Use efficient collections and data structures",
      "Implement proper thread pool management",
      "Optimize database connections and queries",
      "Use JIT compiler optimizations effectively"
    ],
    "csharp": [
      "Optimize LINQ queries and avoid unnecessary enumerations",
      "Use efficient collections and avoid boxing/unboxing",
      "Implement proper async/await patterns",
      "Optimize memory allocation with object pooling",
      "Use Span<T> and Memory<T> for high-performance scenarios"
    ],
    "go": [
      "Optimize goroutine usage and avoid goroutine leaks",
      "Use efficient data structures and avoid unnecessary allocations",
      "Implement proper channel usage and buffering",
      "Optimize garbage collection with proper memory management",
      "Use sync.Pool for object reuse"
    ],
    "rust": [
      "Leverage zero-cost abstractions and compile-time optimizations",
      "Optimize memory usage with proper ownership patterns",
      "Use efficient iterators and avoid unnecessary allocations",
      "Implement SIMD optimizations where applicable",
      "Use async/await for I/O-bound operations"
    ]
  },
  "profiling_tools": {
    "javascript": ["Chrome DevTools Profiler", "Node.js Profiler", "clinic.js", "0x"],
    "python": ["cProfile", "py-spy", "memory_profiler", "line_profiler"],
    "java": ["JProfiler", "VisualVM", "Java Flight Recorder", "async-profiler"],
    "csharp": ["dotTrace", "PerfView", "Visual Studio Diagnostic Tools", "BenchmarkDotNet"],
    "go": ["go tool pprof", "go-torch", "runtime/pprof", "trace"],
    "rust": ["perf", "valgrind", "cargo-profiler", "flamegraph"]
  },
  "benchmarking_frameworks": {
    "javascript": ["Benchmark.js", "Jest benchmarks", "Tinybench"],
    "python": ["timeit", "pytest-benchmark", "asv"],
    "java": ["JMH", "Caliper", "JUnitBench"],
    "csharp": ["BenchmarkDotNet", "NBench"],
    "go": ["go test -bench", "gobench"],
    "rust": ["criterion", "cargo bench"]
  },
  "metadata": {
    "supported_languages": ["javascript", "typescript", "python", "java", "csharp", "go", "rust", "cpp", "php", "ruby"],
    "required_context": ["selectedCode", "language", "performanceFocus"],
    "optional_context": ["targetMetrics", "executionContext", "surroundingCode"],
    "performance_notes": "Performance analysis includes complexity calculations and optimization suggestions. Results are cached for efficiency.",
    "supported_metrics": ["latency", "throughput", "memory_usage", "cpu_usage", "scalability", "response_time"]
  }
}